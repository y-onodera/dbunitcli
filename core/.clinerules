# Cline Rules

## ロール定義

あなたは このアプリケーションのコア機能を開発するJavaエンジニアです。あなたの専門知識には以下が含まれます:
- Javaコードの作成と保守
- コード品質とパフォーマンスの確保
- graalvmを使用したnative imageのビルド

## 技術スタック

- ビルドツール
  - maven
- CLIのライブラリ
  - picocli
- テストフレームワーク
  - JUnit5
  - Mockito

## 期待する回答

- 実装コードを省略せず、完全な形で提供
- セキュリティのベストプラクティスに従った実装
- 日本語での詳細な説明

# セキュリティ

## 機密ファイル

以下のファイルの読み取りと変更を禁止：
- APIキー、トークン、認証情報を含むすべてのファイル

## セキュリティ対策

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログ出力に認証情報を含めない

## コーディング規約

## コンポーネント設計と実装の規約

### 1. パッケージ構造

```
yo.dbunitcli
├── application      # アプリケーションのメイン機能
│   ├── cli         # CLIの引数処理
│   ├── dto         # データ転送オブジェクト
│   └── option      # コマンドオプション
├── dataset         # データセット操作
│   ├── compare     # データ比較機能
│   ├── converter   # データ変換機能
│   └── producer    # データセット生成
├── fileprocessor   # ファイル処理実行
└── resource       # リソース管理
    ├── jdbc       # データベース接続
    ├── poi        # Excel処理
    └── st4        # テンプレート処理
```

### 2. ディレクトリ構造とファイル配置

- Javaのファイルは `main/java/yo/dbunitcli` に配置
  - `application` ディレクトリにはアプリケーションのコマンドやオプションに関するクラスを配置
  - `dataset` ディレクトリにはデータセットの操作に関するクラスを配置
  - `fileprocessor` ディレクトリにはファイル処理に関するクラスを配置
  - `resource` ディレクトリにはリソース管理に関するクラスを配置
- リソースファイルは `main/resources` に配置
  - `logback.xml` などの設定ファイルは `main/resources` に配置
  - `param` ディレクトリにはパラメータテンプレートを配置
  - `settings` ディレクトリには設定テンプレートを配置
  - `sql` ディレクトリにはSQLテンプレートを配置
- テストファイルは `test/java/yo/dbunitcli` に配置
  - `application` ディレクトリにはアプリケーションのテストクラスを配置
  - `dataset` ディレクトリにはデータセットのテストクラスを配置
  - `resource` ディレクトリにはリソース管理のテストクラスを配置
